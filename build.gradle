plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    //id "com.github.johnrengelman.shadow" version '7.1.2' apply true

    // Plugin to create merged jars
    id "io.github.pacifistmc.forgix" version "1.2.6"

}
architectury {
    minecraft = rootProject.minecraft_version
}

forgix {
    group = "smartin.miapi"
    mergedJarName = "Truly-Modular-miapi-${rootProject.mod_version}-${rootProject.minecraft_version}.jar"
}

tasks.register('clean-builds') {
    dependsOn(':forge:clean',':fabric:clean')
    doLast {
        println "Cleaned previous build"
    }
}

tasks.register('buildBoth') {
    dependsOn('clean-builds', ':fabric:build', ':forge:build')
    doLast {
        def modVersion = rootProject.mod_version
        def minecraftVersion = rootProject.minecraft_version
        def fabricBuildDir = project(':fabric').file('build/libs')
        def forgeBuildDir = project(':forge').file('build/libs')
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }

        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-miapi-${modVersion}-${minecraftVersion}-fabric.jar"
                }
            }
        }

        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-miapi-${modVersion}-${minecraftVersion}-forge.jar"
                }
            }
        }

        println "Builds completed"
    }
}

tasks.register('copyArchery') {
    ext.projectName = "archery"
    group = '_tm_tasks'
    doLast {
        def currentProject = project(projectName)
        def modVersion = currentProject.mod_version
        def fabricBuildDir = currentProject.file('fabric/build/libs')
        def forgeBuildDir = currentProject.file('forge/build/libs')
        println fabricBuildDir
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('forge/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from forgeJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('fabric/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from fabricJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }
        println "Builds Copied"
    }
}

tasks.register('copyArmory') {
    ext.projectName = "armory"
    group = '_tm_tasks'
    doLast {
        def currentProject = project(projectName)
        def modVersion = currentProject.mod_version
        def fabricBuildDir = currentProject.file('fabric/build/libs')
        def forgeBuildDir = currentProject.file('forge/build/libs')
        println fabricBuildDir
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('forge/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from forgeJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('fabric/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from fabricJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }

        println "Builds Copied"
    }
}

tasks.register('copyArsenal') {
    ext.projectName = "arsenal"
    group = '_tm_tasks'
    doLast {
        def currentProject = project(projectName)
        def modVersion = currentProject.mod_version
        def fabricBuildDir = currentProject.file('fabric/build/libs')
        def forgeBuildDir = currentProject.file('forge/build/libs')
        println fabricBuildDir
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('forge/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from forgeJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('fabric/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from fabricJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }

        println "Builds Copied"
    }
}

tasks.register('copyNucleus') {
    ext.projectName = "nucleus"
    group = '_tm_tasks'
    doLast {
        def currentProject = project(projectName)
        def modVersion = currentProject.mod_version
        def fabricBuildDir = currentProject.file('fabric/build/libs')
        def forgeBuildDir = currentProject.file('forge/build/libs')
        println fabricBuildDir
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('forge/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from forgeJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('fabric/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
            copy {
                from fabricJar
                into project.file('common/libs')
                rename { fileName -> projectName+"-local.jar"}
            }
        }

        println "Builds Copied"
    }
}


tasks.register('buildMerged') {
    dependsOn('clean-builds',':fabric:build', ':forge:build')
    doLast {
        println "Builds completed"
    }
    finalizedBy ':mergeJars'
}

tasks.register('buildAll') {
    dependsOn('buildBoth')
    doLast {
        println "Merging..."
    }
    finalizedBy ':mergeJars'
}


subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:1.20.1+build.10:v2"
        implementation "org.mariuszgromada.math:MathParser.org-mXparser:${rootProject.mathparser_version}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven {
            url "https://maven.fabricmc.net/"
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}