plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath


    forge { // gone are the days of forge!
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "miapi-common.mixins.json"
        mixinConfig "miapi.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.uuid.gg/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.theillusivec4.top/' }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven { url "https://cursemaven.com" }
    maven { url "https://maven.merchantpug.net" }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    forgeRuntimeLibrary(include("org.mariuszgromada.math:MathParser.org-mXparser:${rootProject.mathparser_version}"))
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")
    modApi("top.theillusivec4.caelus:caelus-forge:${rootProject.forge_caelus_version}")

    modApi(include("com.redpxnda.nucleus:core-forge:${rootProject.minecraft_version}+${rootProject.nucleus_core_version}"))
    modApi(include("com.redpxnda.nucleus:codec-forge:${rootProject.minecraft_version}+${rootProject.nucleus_codec_version}"))
    modApi(include("com.redpxnda.nucleus:pose-forge:${rootProject.minecraft_version}+${rootProject.nucleus_pose_version}"))
    modApi(include("com.redpxnda.nucleus:facet-forge:${rootProject.minecraft_version}+${rootProject.nucleus_facet_version}"))

    modLocalRuntime files('libs/arsenal-local.jar')
    modLocalRuntime files('libs/archery-local.jar')
    modLocalRuntime files('libs/armory-local.jar')

    //modCompileOnly "curse.maven:epic-fight-mod-405076:4785528"
    //modImplementation "curse.maven:epic-fight-mod-405076:4785528"

    //modApi files('libs/apoli-forge-1.20.1-2.9.0.4-all.jar')

    //forgeRuntimeLibrary(include("dev.kosmx.player-anim:player-animation-lib-forge:0.4.2"
    //modApi include("curse.maven:bettercombat-639842:4357578")

    //https://github.com/EdwinMindcraft/origins-architectury/releases/download/1.10.0.5/apoli-forge-1.20.1-2.9.0.4.jar

    /*
    modImplementation ('com.github.EdwinMindcraft:origins-architectury:1.10.0.5') {
        exclude group: 'group_name', module: ' apoli-forge-1.20.1-2.9.0.4-all.jar'
        exclude group: 'group_name', module: ' origins-forge-1.20.1-1.10.0.5.jar'
        exclude group: 'group_name', module: ' origins-forge-1.20.1-1.10.0.5-all.jar'
        // Add exclude lines for each unwanted JAR
    }
     */

    /*
modApi "com.github.EdwinMindcraft:origins-architectury:1.13.0"
modApi "com.github.EdwinMindcraft:origins-architectury:${project.fabric_apoli_version}"
include "com.github.EdwinMindcraft:origins-architectury:${project.fabric_apoli_version}"
 */


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    //exclude("architectury.common.json", "architectury.common", "fabric.mod.json")
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.register('githubPublish') {
    finalizedBy ':forge:publish'
    group = 'publishing'

    doLast {
        publishing.publications.mavenForge.groupId = "com.${rootProject.github}"
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.mod_version + "-" + rootProject.minecraft_version

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven { url uri(file("$rootDir/build/repository")) }
    }
}